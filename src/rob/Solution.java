package rob;

/**
 * No.198 打家劫舍
 *
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 *
 * 翻译翻译：从一个非负整数数组中挑选一组数，每个数最多挑选一次，不能同时挑选相邻的两个数，求最后挑选的一组数的最大和
 */

public class Solution {

    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        // dp[i]：从下标0~i范围内挑选出的符合条件的最大和为dp[i]
        int[] dp = new int[n];

        // 两种情况：
        // 1. 选nums[i]，则前面只能从 0~i-2 选。（下标i-1房一定是不考虑的，找出 下标i-2（包括i-2）以内的房屋，最多可以偷窃的金额为dp[i-2] 加上第i房间偷到的钱。）
        // 2. 不选nums[i]，则前面可以从 0~i-1 选。（考虑i-1房，注意这里是考虑，并不是一定要偷i-1房）
        // 递推公式：dp[i] = max{dp[i-2] + nums[i], dp[i-1]}

        // 初始化，dp的基础是dp[0]和dp[1]，因此只初始化前2个，后面可以根据递推公式算
        dp[0] = nums[0]; // 只在前1个中选择，则最大和就是第一个数
        dp[1] = Math.max(nums[0], nums[1]); // 在前2个中选择，由于不能选相邻的，因此最大和为较大的数

        // 遍历顺序，从前往后，因为计算dp[i]要依赖于前面的dp[i-2]和dp[i-1]
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
        }

        return dp[n-1];
    }
}
